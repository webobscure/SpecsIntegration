require("dotenv").config();
const axios = require("axios");
const fs = require("fs");

const logStream = fs.createWriteStream("./shopify_metafields.log", {
  flags: "a",
});
function logToFile(message) {
  const line = `[${new Date().toISOString()}] ${message}`;
  console.log(line);
  logStream.write(line + "\n");
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä axios —Å –±–∞–∑–æ–≤—ã–º URL –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const axiosInstance = axios.create({
  baseURL: `https://${process.env.SHOPIFY_SHOP_NAME}.myshopify.com/admin/api/${process.env.SHOPIFY_API_VERSION}/`,
  auth: {
    username: process.env.SHOPIFY_API_KEY,
    password: process.env.SHOPIFY_API_PASSWORD,
  },
  headers: {
    "Content-Type": "application/json",
  },
});

async function handleRateLimits(headers) {
  const callsLimit = headers["x-shopify-api-call-limit"];
  if (callsLimit) {
    const [callsMade, callsMax] = callsLimit.split("/").map(Number);
    const callsLeft = callsMax - callsMade;
    if (callsLeft < 3) {
      logToFile(
        `‚è≥ –õ–∏–º–∏—Ç –ø–æ—á—Ç–∏ –∏—Å—á–µ—Ä–ø–∞–Ω (${callsLeft} –≤—ã–∑–æ–≤–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å), –∂–¥—ë–º 1500 –º—Å...`
      );
      await new Promise((res) => setTimeout(res, 1500));
    }
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã (–¥–ª–∏–Ω–∞ x —à–∏—Ä–∏–Ω–∞ x –≤—ã—Å–æ—Ç–∞) * 10
function formatDimensions(obj) {
  if (!obj || !obj.length || !obj.width || !obj.height) return "";

  function processNumber(str) {
    if (typeof str !== "single_line_text_field") str = String(str);
    return str.includes(".") ? Number(str) * 10 : Number(str);
  }

  const length = processNumber(obj.length);
  const width = processNumber(obj.width);
  const height = processNumber(obj.height);

  if (isNaN(length) || isNaN(width) || isNaN(height)) return "";

  return `${length} x ${width} x ${height}`;
} 
async function updateOrCreateMetafield(productId, namespace, key, value) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
    if (!value || String(value).trim() === "") {
      logToFile(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${key} –∏–∑-–∑–∞ –ø—É—Å—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è`);
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞—Ñ–∏–ª–¥—ã –ø—Ä–æ–¥—É–∫—Ç–∞
    const resp = await axiosInstance.get(
      `products/${productId}/metafields.json`
    );
    await handleRateLimits(resp.headers);
    const existing = resp.data.metafields;

    const found = existing.find(
      (m) => m.namespace === namespace && m.key === key
    );
    const safeValue = String(value).substring(0, 255);
    const valueType = "single_line_text_field"; // –ú–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ number_integer/number_decimal –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

    if (found) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞—Ñ–∏–ª–¥
      await axiosInstance.put(`metafields/${found.id}.json`, {
        metafield: {
          id: found.id,
          value: safeValue,
          type: valueType,
        },
      });
      logToFile(`üîÅ –û–±–Ω–æ–≤–ª–µ–Ω–æ —É –ø—Ä–æ–¥—É–∫—Ç–∞ —Å id ${found.id}: ${key} = ${safeValue}`);
    } else {
      // –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞—Ñ–∏–ª–¥
      await axiosInstance.post(`products/${productId}/metafields.json`, {
        metafield: {
          namespace,
          key,
          value: safeValue,
          type: valueType,
        },
      });
      logToFile(`üÜï –°–æ–∑–¥–∞–Ω–æ: ${key} = ${safeValue}`);
    }
  } catch (err) {
    const errMsg = err.response?.data
      ? JSON.stringify(err.response.data, null, 2)
      : err.message;
    logToFile(
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏/—Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ç–∞—Ñ–∏–ª–¥–∞ (${key}): ${errMsg}`
    );
  }
}

async function getProducts(since_id = 0, limit = 50) {
  try {
    const resp = await axiosInstance.get("products.json", {
      params: { limit, since_id },
    });
    await handleRateLimits(resp.headers);
    return resp.data.products || [];
  } catch (err) {
    const errMsg = err.response?.data
      ? JSON.stringify(err.response.data, null, 2)
      : err.message;
    logToFile(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${errMsg}`);
    return [];
  }
}

async function updateMetafieldsFromAPI() {
  try {
    let since_id = 0;
    const limit = 50;

    while (true) {
      const products = await getProducts(since_id, limit);
      if (products.length === 0) break;

      for (const product of products) {
        try {
          const resp = await axiosInstance.get(
            `products/${product.id}/metafields.json`
          );
          await handleRateLimits(resp.headers);
          const metafields = resp.data.metafields;

          const modelField = metafields.find(
            (f) => f.key === "modelnameformanual"
          );
          if (!modelField) {
            logToFile(`‚ùå –£ –ø—Ä–æ–¥—É–∫—Ç–∞ ${product.title} –Ω–µ—Ç modelnameformanual`);
            continue;
          }

          const modelName = modelField.value;

          let response;
          try {
            response = await axios.get(
              `https://shop.onkron.ru/get_cargo_data.php?model=${modelName}`
            );
          } catch (err) {
            logToFile(`‚ö†Ô∏è –û—à–∏–±–∫–∞ API –¥–ª—è ${modelName}: ${err.message}`);
            continue;
          }

          const data = response.data;
          const euro = data?.euro_palet;
          const qty20 = data?.["QTY 20 GP"];
          const qty40 = data?.["QTY 40 HQ"];

          if (!euro?.prodInfo) {
            logToFile(`‚ö†Ô∏è –ù–µ—Ç prodInfo –¥–ª—è ${modelName}`);
            continue;
          }

          const updates = [
            { key: "prod_dimensions", value: formatDimensions(euro.prodInfo) },
            {
              key: "pallet_dimensions",
              value: formatDimensions(euro.palletInfo),
            },
            {
              key: "weight_one_prod",
              value: euro.prodInfo.weightOneProd
                ? Number(euro.prodInfo.weightOneProd).toFixed(2)
                : null,
            },
            { key: "count_in_box", value: euro.prodInfo.countInBox },
            { key: "all_boxes", value: euro.allBoxes },
            {
              key: "total_weight",
              value: euro.totalWeight
                ? Number(euro.totalWeight).toFixed(2)
                : null,
            },
            { key: "qty_20gp_boxes", value: qty20?.allBoxes },
            { key: "qty_40hq_boxes", value: qty40?.allBoxes },
          ];

          for (const { key, value } of updates) {
            if (value != null && String(value).trim() !== "") {
              await updateOrCreateMetafield(
                product.id,
                "cargo_data",
                key,
                value
              );
              // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –º–µ—Ç–∞—Ñ–∏–ª–¥–æ–≤, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç—ã
              await new Promise((res) => setTimeout(res, 600));
            }
          }

          // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏, —á—Ç–æ–±—ã —Å–Ω–∏–∑–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ API
          await new Promise((res) => setTimeout(res, 800));
        } catch (err) {
          logToFile(
            `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞ ${product.title}: ${err.message}`
          );
        }
      }

      since_id = products[products.length - 1].id;
    }

    logToFile("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
  } catch (error) {
    const errMsg = error.response?.data
      ? JSON.stringify(error.response.data, null, 2)
      : error.message;
    logToFile(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: ${errMsg}`);
  }
}

updateMetafieldsFromAPI();
